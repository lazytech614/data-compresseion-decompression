generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId   String?  @unique
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  avatar    String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relations
  compressionJobs CompressionJob[]
  files          File[]
  
  @@map("users")
}

model CompressionJob {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String  @db.Uuid
  
  // Job details
  status      JobStatus @default(PENDING)
  type        CompressionType
  quality     Int? // For lossy compression
  algorithm   CompressionAlgorithm?
  
  // File information
  originalSize    BigInt
  compressedSize  BigInt?
  compressionRatio Float?
  
  // Processing details
  startTime   DateTime @default(now())
  endTime     DateTime?
  duration    Int? // in milliseconds
  errorMessage String?
  
  // Metadata
  batchId     String? // For batch operations
  priority    Priority @default(NORMAL)
  
  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  inputFiles  File[] @relation("InputFiles")
  outputFiles File[] @relation("OutputFiles")
  
  @@map("compression_jobs")
}

model File {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String  @db.Uuid
  
  // File details
  filename    String
  originalName String
  mimeType    String
  size        BigInt
  path        String // Storage path
  url         String? // Public URL if applicable
  
  // File metadata
  checksum    String // For integrity verification
  isTemporary Boolean @default(true)
  isPublic    Boolean @default(false)
  
  // Expiration
  expiresAt   DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastAccessed DateTime @default(now())
  
  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  inputForJobs    CompressionJob[] @relation("InputFiles")
  outputForJobs   CompressionJob[] @relation("OutputFiles")
  
  @@map("files")
}

model SystemStats {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                 DateTime @unique @default(now())

  // Daily metrics
  totalUsers           Int      @default(0)
  totalCompressions    Int      @default(0)
  totalDataProcessed   BigInt   @default(0)
  avgCompressionRatio  Float    @default(0)
  totalStorageUsed     BigInt   @default(0)

  // Category-wise stats
  photoCount           Int      @default(0)
  photoAvgRatio        Float    @default(0)
  photoAvgDuration     Float    @default(0)

  videoCount           Int      @default(0)
  videoAvgRatio        Float    @default(0)
  videoAvgDuration     Float    @default(0)

  documentCount        Int      @default(0)
  documentAvgRatio     Float    @default(0)
  documentAvgDuration  Float    @default(0)

  audioCount           Int      @default(0)
  audioAvgRatio        Float    @default(0)
  audioAvgDuration     Float    @default(0)

  textCount            Int      @default(0)
  textAvgRatio         Float    @default(0)
  textAvgDuration      Float    @default(0)

  unknownCount         Int      @default(0)
  unknownAvgRatio      Float    @default(0)
  unknownAvgDuration   Float    @default(0)

  // Algorithm-wise stats
  huffmanCount         Int      @default(0)
  huffmanAvgRatio      Float    @default(0)
  huffmanAvgDuration   Float    @default(0)

  lz77Count            Int      @default(0)
  lz77AvgRatio         Float    @default(0)
  lz77AvgDuration      Float    @default(0)

  lzwCount             Int      @default(0)
  lzwAvgRatio          Float    @default(0)
  lzwAvgDuration       Float    @default(0)

  arithmeticCount      Int      @default(0)
  arithmeticAvgRatio   Float    @default(0)
  arithmeticAvgDuration Float   @default(0)

  @@map("system_stats")
}


model UsageLog {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  
  // Action details
  action    String // "compress", "decompress", "download", etc.
  endpoint  String?
  method    String?
  
  // Request details
  ipAddress String?
  userAgent String?
  
  // Response details
  statusCode Int?
  responseTime Int? // in milliseconds
  dataSize  BigInt? // bytes processed
  
  // Timestamps
  timestamp DateTime @default(now())
  
  @@index([userId])
  @@index([timestamp])
  @@map("usage_logs")
}

// Enums
enum Plan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum CompressionType {
  COMPRESS
  DECOMPRESS
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum CompressionAlgorithm {
  HUFFMAN
  LZ77
  RLE
  LZW
  LZ4
  ZSTD
  BZIP2
  GZIP
  DEFLATE
  LZMA
  LZMA2
  XZ
  LZ4HC
  LZ4FAST
  LZ4FASTHC
}